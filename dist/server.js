"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("dns"),s=require("fs-extra"),t=require("http"),n=require("path"),r=require("argparse"),o=require("body-parser"),i=require("compression"),a=require("es6-promise"),l=require("express"),h=require("helmet"),c=require("mongoose"),p=require("opn"),u=require("socket.io"),d=require("winston"),g=require("./events/events"),v=require("./models/models"),m=require("./routes/routes");class w{constructor(){this.config={},this.env=process.env.NODE_ENV||"dev",this.events={client:null,group:null,lender:null,user:null},this.logger=null,this.helmet=h,this.models={Client:null,Group:null,Lender:null,User:null},this.opn=p,this.routes={admin:null,client:null,clients:null,groups:null,lenders:null,general:null,users:null},this.status={online:!1},this.port=parseInt(process.env.PORT)||parseInt(process.env.C9_PORT)||parseInt(process.env.OPENSHIFT_NODEJS_PORT)||8e3,this.ip=process.env.IP||process.env.OPENSHIFT_NODEJS_IP||"127.0.0.1"}checkOnlineStatus(){return new a.Promise(s=>{e.resolve("www.google.com",(e,t)=>{e?(this.status.online=!1,s(!1)):(this.status.online=!0,s(!0))})})}connectSockets(){return new a.Promise((e,s)=>{this.events.client=new g.ClientsEvents(this,"clients"),this.events.group=new g.GroupsEvents(this,"groups"),this.events.lender=new g.LendersEvents(this,"lenders"),this.events.user=new g.UsersEvents(this,"users"),e()})}connectToDatabase(e){return new a.Promise((s,t)=>{this.database.connect_interval=setInterval(()=>{this.database.conn=c.connect(e,{autoReconnect:!0}),this.database.conn.then(()=>{process.stdout.write("Database connected\n"),clearInterval(this.database.connect_interval),s()}).catch(e=>{process.stdout.write("Couldn't connect database.\n"),s()})},3e3)})}getDbPath(e){return this.database={conn:null,connect_interval:null,db:null,path:""},new a.Promise((s,t)=>{process.env.OPENSHIFT_MONGODB_DB_USERNAME&&process.env.OPENSHIFT_MONGODB_DB_PASSWORD&&(this.database.path+="mongodb://"+process.env.OPENSHIFT_MONGODB_DB_USERNAME+":"+process.env.OPENSHIFT_MONGODB_DB_PASSWORD+"@"),process.env.OPENSHIFT_MONGODB_DB_HOST?this.database.path+=process.env.OPENSHIFT_MONGODB_DB_HOST+":":this.database.path+="127.0.0.1:",process.env.OPENSHIFT_MONGODB_DB_PORT?this.database.path+=process.env.OPENSHIFT_MONGODB_DB_PORT:this.database.path+="27017",this.database.path+=`/${this.config.appname}`,s(1==e?`mongodb://${this.config.database.user}:${this.config.database.pass}@${this.config.database.path}/${this.config.appname}`:`mongodb://${this.database.path}`)})}getLaunchConfig(){return new a.Promise((e,t)=>{s.readJSON(n.resolve(__dirname,"config.json"),(s,n)=>{if(s)return t(s);this.config=n;var o=new(0,r.ArgumentParser)({version:"1.0.0",addHelp:!0,description:this.config.appname});o.addArgument(["-n","--appname"],{action:"store",type:"string",help:"Name of the server. It controls the database to connect to and other settings."}),o.addArgument(["-p","--port"],{action:"store",type:"string",help:"Port to launch server on"}),o.addArgument(["--database"],{action:"store",type:"string",help:"\n              Name of the server. It controls the MongoDB database to connect to.\n              If the line ends with a slash, then option [-n,--appname] must be provided."}),o.addArgument(["-u","--dbuser"],{action:"store",type:"string",help:"user of the provided database"}),o.addArgument(["-l","--log"],{action:"store",choices:["0","1","2","3"],type:"int",help:"Controls logging level"}),o.addArgument(["--dbpass"],{action:"store",type:"string",help:"Password for provided database user. Ignored if user isn't provided."});var i=o.parseArgs();Object.keys(i).forEach(e=>{e in this.config&&("database"===e&&i[e]&&i[e].endsWith("/")&&!i.appname&&t("Invalid database path. When ending your database path with a slash you must provide an app name with [-n, --appname] option.\nExiting\n"),i[e]&&(this.config[e]=i[e]))});this.config;e(this.config)})})}static launch(){return new a.Promise((e,s)=>{let t=new w;t.getLaunchConfig().then(e=>{t.setUpLogger().then(()=>t.checkOnlineStatus().then(s=>t.getDbPath(s).then(s=>t.connectToDatabase(s).then(()=>t.modelDatabase().then(()=>t.setUpServer().then(s=>s.connectSockets().then(()=>s.setUpRoutes().then(s=>{s.startServer(s.port).then(e=>{process.stderr.write(`\nServer started\n${e.message}`)}).catch(t=>{"EADDRINUSE"==t.code&&(e.port++,s.startServer(e.port))})}).catch(console.error)).catch(console.error)).catch(console.error)).catch(console.error)).catch(console.error)).catch(console.error)))}).catch(console.error),e(this)})}modelDatabase(){return a.Promise.resolve(()=>{this.models={Client:new v.Client(this),Group:new v.Group(this),Lender:new v.Lender(this),User:new v.User(this)}})}setUpLogger(){var e={file:{level:"info",filename:n.resolve(__dirname,"logs","app.log"),handleExceptions:!0,json:!0,maxsize:5242880,maxFiles:5,colorize:!0},console:{level:"debug",handleExceptions:!0,json:!1,colorize:!0}};return a.Promise.resolve(()=>{this.logger=new d.Logger({level:"verbose",transports:[new d.transports.Console,new d.transports.File(e.file),new d.transports.File({filename:n.resolve(this.config.log.files.error),level:"error"}),new d.transports.File({filename:n.resolve(this.config.log.files.debug),level:"debug"}),new d.transports.File({filename:n.resolve(this.config.log.files.info),level:"info"}),new d.transports.File({filename:n.resolve(this.config.log.files.silly),level:"silly"}),new d.transports.File({filename:n.resolve(this.config.log.files.verbose),level:"verbose"}),new d.transports.File({filename:n.resolve(this.config.log.files.warn),level:"warn"}),new d.transports.File({filename:n.resolve(this.config.log.files.full)})],exitOnError:!1}),"production"!==process.env.NODE_ENV&&this.logger.add(new d.transports.Console({}))})}setUpRoutes(){return new a.Promise((e,s)=>{this.app.use(o.json()),this.app.use(o.urlencoded({extended:!0})),this.app.use(i({threshold:1024})),this.app.all("*",(e,s,t)=>{s.header("Access-Control-Allow-Origin","*"),s.header("Access-Control-Allow-Methods","PUT, GET, POST, DELETE, OPTIONS"),s.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),t()}),this.app.use("/",(e,s,t)=>{process.stdout.write(`${e.method.toUpperCase()}  ${e.path}\n`),t()}),this.app.use("/administration",l.static(n.join(__dirname,"views","admin"),{maxAge:"30s"})),this.app.use("/admin",l.static(n.join(__dirname,"views","admin"),{maxAge:"30s"})),this.app.use("/app",l.static(n.join(__dirname,"views","app"),{maxAge:"30s"})),this.app.use("/client",l.static(n.join(__dirname,"views","client"),{maxAge:"30s"})),this.app.use("/",l.static(n.join(__dirname,"views","client"),{maxAge:"30s"})),this.routes.admin=new m.AdminRoutes(this),this.routes.client=new m.ClientRoutes(this),this.routes.clients=new m.ClientsRoutes(this),this.routes.groups=new m.GroupsRoutes(this),this.routes.lenders=new m.LendersRoutes(this),this.routes.users=new m.UsersRoutes(this),this.routes.general=new m.GeneralRoutes(this),e(this)})}setUpServer(){return new a.Promise((e,s)=>{this.app=l(),this.server=t.createServer(this.app),this.socket=u.listen(this.server),e(this)})}startServer(e){return new a.Promise((s,t)=>{this.server.listen(e||this.port,()=>{let e=this.server.address();console.log(process.env.NODE_ENV);let t=!1;"dev"!=process.env.NODE_ENV||t||(process.stdout.write(`Opening browser at http://localhost:${e.port}`),t=!0,p(`http://localhost:${e.port}`).then(e=>{}).catch(e=>{process.stdout.write("Couldn't launch browser")})),s({message:`\n${this.config.appname} running on ${e.address}:${e.port}\n`,address:e})}).on("error",e=>{t(e)})})}}exports.Mlipia=w,w.launch();